<project name="Compiler" default="integration_tests" basedir=".">

  <property name="base_package_dir" value="edu/mit/compilers/lizfong" />
  <property name="base_package_name" value="edu.mit.compilers.lizfong" />

  <!-- Manually generated java files -->
  <property name="src" location="src" />

  <!-- Auto-generated java files -->
  <property name="autogen" location="autogen" />

  <!-- Target Dir for compile -->
  <property name="classes" location="classes" />

  <!-- Jar directory -->
  <property name="dist" location="dist" />

  <!-- Directory containing tests -->
  <property name="tests" location="tests" />

  <!-- Directory containing unit tests -->
  <property name="unittests" location="${tests}/src" />

  <!-- Runtime libraries -->
  <property name="lib" location="lib" />
  <!-- Dependencies: ANTLR 2.7.7 -->

  <!-- Binaries for tools, etc. -->
  <property name="bin" location="bin" />
  
  <!-- Build up a path structure for a classpath 
       that includes the binaries (jars) in bin/ and 
       the existing classpath.  Not used now, 
       because the jflex and cup task define their own cp, 
       but could come in handly later. -->
  <path id="binaries">
    <pathelement location="${bin}" />
    <fileset dir="${bin}">
      <include name="**/*.jar" />
      <include name="**/*.zip" />
    </fileset>
    <pathelement path="${java.class.path}" />
    <pathelement path="${classes}" />
  </path>

  <!-- Build up a path structure for a classpath 
       that includes the libraries and the existing classpath -->
  <path id="libraries">
    <pathelement location="${lib}" />
    <fileset dir="${lib}">
      <include name="**/*.jar" />
      <include name="**/*.zip" />
    </fileset>
    <pathelement path="${java.class.path}" />
  </path>

  <target name="init">
    <mkdir dir="${classes}" />
    <mkdir dir="${dist}" />
    <mkdir dir="${autogen}/${base_package_dir}/grammar" />
  </target>

  <target name="scanner" depends="init">
    <antlr
      target="${src}/${base_package_dir}/grammar/lexer.g"
      outputdirectory="${autogen}/${base_package_dir}/grammar">
      <classpath>
        <pathelement location="${lib}/antlr.jar" />
      </classpath>
    </antlr>
  </target>

  <target name="parser" depends="scanner">
    <!-- set trace="yes" if you want to trace the parser actions -->
    <antlr
      target="${src}/${base_package_dir}/grammar/parser.g"
      outputdirectory="${autogen}/${base_package_dir}/grammar">
      <classpath>
        <pathelement location="${lib}/antlr.jar" />
      </classpath>
    </antlr>
  </target>

  <target name="compile" depends="parser">
    <javac srcdir="${autogen}:${src}:${unittests}" destdir="${classes}" debug="on"
           includeantruntime="false">
      <classpath refid="libraries" />
    </javac>
  </target>

  <target name="unittests" depends="compile">
    <junit>
      <classpath>
        <path refid="libraries" />
        <pathelement path="${classes}" />
      </classpath>
      <formatter type="plain" usefile="false" />
      <batchtest fork="yes">
        <fileset dir="${unittests}">
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="jar" depends="unittests">
    <jar jarfile="${dist}/Compiler.jar" basedir="${classes}">
     <manifest>
       <attribute name="Main-Class" value="${base_package_name}.Main" />
       <!-- ANTLR runtime is needed for parsing! -->
       <attribute name="Class-Path" value="antlr.jar" />
     </manifest>
    </jar>
    <!-- Third party libraries can only be found by java -jar if they reside in the same dir
         but we don't a billion copies floating around, so use symlinks instead. -->
    <symlink link="${dist}/antlr.jar" resource="${lib}/antlr.jar" overwrite="true" />
  </target>

  <target name="integration_tests" depends="jar">
    <!-- Iterate over the non-unittest test directories -->
    <exec executable="${tests}/scanner/test.sh" failonerror="true" />
    <exec executable="${tests}/parser/test.sh" failonerror="true" />
  </target>

 <!-- to clean, delete everything in the autogen, classes, and dist
      directories -->
  <target name="clean">
     <delete dir="${autogen}" />
     <delete dir="${classes}" />
     <delete dir="${dist}" />
  </target>

</project>
