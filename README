Code is organized in the following structure:

build.xml - The master build file for the project.
src
|-edu/mit/compilers/tools/CLI.java:
|   command-line parsing libraries, modified from originally provided CLI.java
|-edu/mit/compilers/le02/Main.java:
|    the main entry point for the compiler
|-edu/mit/compilers/le02/CompilerException.java
|   the base SourceLocation-aware exception class for the compiler
|-src/edu/mit/compilers/le02/SourceLocation.java
|   encodes input locations for use in error reporting
|-src/edu/mit/compilers/le02/ErrorReporting.java
|   collects errors and pretty-prints them with context
|-src/edu/mit/compilers/le02/Util.java
|   miscellaneous utility methods
|-src/edu/mit/compilers/le02/DecafType.java
|   enum containing the valid types of the Decaf language
|-src/edu/mit/compilers/le02/symboltable/*Descriptor.java
|   different kinds of descriptors used in symbol tables
|-src/edu/mit/compilers/le02/symboltable/SymbolTable.java
|   symbol tables used in each context in the CodeIR
|-src/edu/mit/compilers/le02/semanticchecks/*.java
|   semantic checks that the compiler runs upon the populated CodeIR
|-src/edu/mit/compilers/le02/ir/IrGenerator.java
|   generates the CodeIR/AST based on the concrete parse tree
|-src/edu/mit/compilers/le02/ir/IntRangeChecker.java
|   checks integer ranges after processing of unary minus on raw ints
|-src/edu/mit/compilers/le02/grammar/scanner.g
|   scanner ANTLR grammar, used to create autogenerated scanner
|-src/edu/mit/compilers/le02/grammar/parser.g
|   parser ANTLR grammar, used to create autogenerated parser
|-src/edu/mit/compilers/le02/stgenerator/ASTDescriptorVisitor.java
|   walks the AST and populates symbol tables and adds descriptors to each
|   node in the AST that has a descriptor
|-src/edu/mit/compilers/le02/ast/*Node.java
|   node classes that are used to build up the AST
|   see src/edu/mit/compilers/le02/ast/AstDesign.txt for documentation
|-src/edu/mit/compilers/le02/ast/ASTNodeVisitor.java
|   base AST walking class, used for semantic checks/symbol table generation
|-src/edu/mit/compilers/le02/ast/AstPrettyPrinter.java
|   pretty-prints the AST

tests
|-src/**/*.java
|   unit tests for code
|-tests/semantics
|   contains legal and illegal programs, and verifies that they pass or fail
|   semantic checks appropriately
|-tests/parser
|   contains legal and illegal programs, and verifies that they pass or fail
|   parsing appropriately
|-tests/scanner
|   contains legal and illegal programs, and verifies that they pass or fail
|   scanning appropriately and produce correct golden outputs
