AST Design Document
Feb 17 2011


All classes have accept methods for Visitors

== AST Node Classes ==

ASTNode - Base class for all nodes, holds debug info for token
  Fields:
  - filename
  - line number
  - column number

=== Declaration Node Classes ===

DeclNode (abstract) - Base class for all declarations
  Fields:
  - type
  - name

FieldDeclNode (abstract) extends DeclNode

ArrayDeclNode extends FieldDeclNode - Class for array declarations
  (inherited fields only)

VarDeclNode extends FieldDeclNode - Class for local variable declarations
  (inherited fields only)

MethodDeclNode extends DeclNode - Class for method declarations
  Children:
  - params: list of VarDeclNodes
  - methodBody: BlockNode


=== Statement Node Classes ===

* Basic Statements *

StatementNode (abstract) - Represents a single discrete statement in the code.

BlockNode extends StatementNode - Represents a newly scoped block of code
  Children:
  - declarations: list of VarDeclNodes
  - statements: list of StatementNodes

AssignNode extends StatementNode - Represents an assignment to a location.
  Children:
  - location: LocationNode
  - value: ExpressionNode


* Control Flow Statements *

IfNode extends StatementNode - Represents an if/then[/else] statement
  Children:
  - condition: ExpressionNode
  - thenBlock: BlockNode
  - elseBlock (optional): BlockNode

ForNode extends StatementNode - Represents a for loop
  Children:
  - init: AssignNode
  - end: ExpressionNode
  - body: BlockNode

BreakNode extends StatementNode - Represent a break statement
ContinueNode extends StatementNode - Represent a continue statement

ReturnNode extends StatementNode - Represent a break statement
  Children:
  - value (optional): ExpressionNode


* Method Call Statements *

CallStatementNode - Represents a method call used as a statement (rather than an expression)
  Children:
  - call: CallNode


=== Expression Node Classes ===

ExpressionNode (abstract) - Represents an expression that will evaluate to a value

* Literal Expressions *

LiteralNode (abstract) extends ExpressionNode - Represents a constant (literal) value

IntNode extends LiteralNode - Represents an int value
  Fields:
  - value

CharNode extends LiteralNode - Represents a char value
  Fields:
  - value

BooleanNode extends LiteralNode - Represents a boolean value
  Fields:
  - value


* Operand Expressions *

UnaryOpNode (abstract) extends ExpressionNode - Represents unary operations
  Children:
  - expr: ExpressionNode

BinaryOpNode (abstract) extends ExpressionNode - Represents any binary operation
  Children:
  - left: ExpressionNode
  - right: ExpressionNode

MathOpNode extends BinaryOpNode - Represents a math operation
  Params:
  - op: ADD, SUBTRACT, MULTIPLY, DIVIDE

BoolOpNode extends BinaryOpNode - Represents a boolean operation
  Params:
  - op: LT, GT, LE, GE, EQ, NEQ, AND, OR
  

* Other Expressions *

VariableNode extends ExpressionNode - Represents the value of a variable (a load)
  Children:
  - location: LocationNode

CallNode (abstract) extends ExpressionNode - Represents the value of a method or system call

MethodCallNode extends CallNode - Represents the value of a method call
  Fields:
  - name
  Children:
  - args: List of ExpressionNodes

SystemCallNode extends CallNode - Represents a system call (callout)
  Children:
  - funcName: StringNode
  - args: List of CalloutArgNodes



=== Other Node Classes ===

ClassNode extends ASTNode - Represents a class
  Children:
  - fields: List of DeclNodes
  - methods: List of MethodDeclNodes

StringNode extends ASTNode - Represents a String
  Fields:
  - str

CalloutArgNode extends ASTNode - Represents an argument to a syscall
  Fields:
  - isString: indicates whether or not this argument is a string or expr
  Children:
  (one will be null)
  - expr: ExpressionNode
  - str: StringNode

LocationNode (abstract) extends ASTNode - Represents a memory location
  Fields:
  - id

ScalarLocationNode extends LocationNode

ArrayLocationNode extends LocationNode
  Children:
  - index: ExpressionNode
