=Assembly Code Generation=

==Division of work==
We used GitHub to organize our work and required a code review for each commit
before it was merged; thus, at least two members of the group understand each
line of code in detail and the entire group understands the overall design.
Maria augmented the descriptors in the existing AST with memory location
information, with collaboration from David. Shaunak generated a control flow
graph for If, For, Break, Continue, and short circuited expressions, with
collaboration from David. David also expanded all remaining expressions into
basic statements. Liz then translated the low-level IR into assembly code.
Liz also wrote the GCC-calling infrastructure and the end to end testing
infrastructure. Maria drafted the writeup, with collaboration from Shaunak and
Liz. All members of the team worked on debugging, testing, and polishing the
final product.

==Clarification/addition/assumptions==
We chose to leave the first six arguments of a function in the mandated by the
x86-64 calling convention instead of pushing them immediately to the stack.
This resulted in some additional complexity since it meant that we had to
save caller variables on function call rather than trusting the stack.

We made an assumption regarding the following statement:
A[function()]=B[function()]
Due to the fact that it is not clear which side should be evaluated first, we
assume that the right side will always be evaluated first.

==Overview of design, analysis of alternatives, and design decisions==	 	
We split the code generation phase of the project into three large parts:
conversion of our high-level IR into a control flow graph (CFG), generation of
assembly code, and development of an end-to-end testing infrastructure.

We build a control-flow graph from our intermediate representation in two 
passes.  After each pass, each node in either graph has a pointer to the next 
node, and if it is a branching node, it has a pointer to a branch target. If 
there are two edges out of the node, then we jump to the branch target if the 
last operation evaluated to 0. In the first pass, each node represents one 
of the following types of statements: an argument load, an assembly op, a call, 
a jump, a dummy statement, or a NOP.
A NOP is used whenever a method, if, or for block is empty. These statements
are passed to assembly generation. Dummy statements and some argument loads are 
only used to build the graph structure; they are removed in the second pass.  
The second pass over the control-flow graph calculates basic block boundaries 
and builds a graph where each node is a basic block, which contains a list of 
the contained statements. This is done precisely by compressing any edges from
nodes of out-degree 1 to nodes of in-degree 1.

We chose to build up to a basic block graph up in two passes rather than one
because proved easier to generate small parts of the program at a time and
link them together, than try to generate the basic block structure as we 
parsed the AST.

The CFG structure consists of a map of label names to basic blocks, a map of
string names to strings, and a list of global fields. The entry point is
defined as being the basic block named 'main'. To generate this CFG,
generic visitor classes designed for the semantic checker were used.
Descriptors were first augmented in our existing AST to include memory
information. Once symbol tables were generated, locations were then assigned to
each TypedDescriptor. Then, expressions in the AST were flattened into basic
statements. All If, For, Break, and Continue and short circuited expressions
were associated with a control flow graph, respresented by a single control
flow element. Finally, all remaining expressions were expanded into basic
statements.

This CFG structure was then converted into assembly code by traversing each
method's control flow, and converting blocks encountered to corresponding
assembly sections. At the end of each BasicBlockNode, the next target and the
branch target are added to the list of blocks to convert if they have not
already been converted. The process of converting each BasicBlockNode involves
converting the (arg1 arg2 dest) statements in the body of the block into at&t
syntax asm code. Additionally, jmps are inserted to replicate the flows among
named blocks into (conditional) jumps between named sections.

Boilerplate is inserted for method entry and returns, implicit returns are
created if we fall off the end of a method without a return, the string table
is populated, and the global symbols are reserved/initialized. Additionally,
error handling and array bounds checks are added.

Regarding our stack design, we decided that temporarily popped registers should
reside below the locals as it is easy to calculate the positions of locals on
the stack when they are created, before we've determined which registers we'll
be using. We calculate the position of locals be pre-allocating them as we
generate our CFG.  We use the standard stack frame layout, as follows:

+------------------------+
| ... previous frame ... |
+------------------------+
|      argument ...      |
+------------------------+
|      argument 9        |
+------------------------+
|      argument 8        | 	24(%rbp)
+------------------------+
|      argument 7        | 	16(%rbp)
+------------------------+
|      return address    | 	8(%rbp)
+------------------------+
|      Old %rbp          | <- %rbp
+------------------------+
|      local 1           | 	-8(%rbp)
+------------------------+
|      local 2           | 	-16(%rbp)
+------------------------+
|      . . .             |
+------------------------+
|      local N           |
+------------------------+
|      popped value 1    |
+------------------------+
|      popped value 2    |
+------------------------+
|      popped value 3    |
+------------------------+
|      popped value 4    | <- %rsp 		
+------------------------+

Finally, an end-to-end testing infrastructure was implemented to help us more
easily spot bugs during the optimization process. This consists of consistency
checkers for both the AST and the CFG, along with a number of unit tests.

==Implementation issues==
Our choice of using local positioning vs. argument positioning could effect us
in the future due to the fact that it will limit the number of registers
available to us for general use.

We encountered problems most principally with the for loop - we were trying to
determine whether its index variable should be allocated in the context of the
block containing the for loop, or within its body. Bugs in the implementation
resulted in the loop index counter colliding with a local variable in the loop
causing loops to be executed fewer times than normal.

Additionally, we discovered bugs where conditionals consisted of single
variables that were not explicitly loaded in the CFG; we added code to convert
references to conditionals without computation of the value of the conditional
to actual loads of the conditional so that conditional branch could proceed.

During attempting to debug why error reporting wasn't working, Liz discovered
that printf requires its format string to end in \n. This was counterintuitive.

Finally, method calls were problematic - we failed to correctly initialize
variables allocated from the stack, causing sporadic errors. We also
accidentally reversed the wrong list of registers when computing the order in
which to pop caller-saved registers off the stack, causing recursive call
errors.

==Commented source code==
See the README file for an index of what components are located in which
packages, and the individual source files for commented code.

==Known problems==
Please see https://github.com/lizthegrey/6035-compiler/issues for an
up-to-date list of known issues.
